package ver2_lec03;

/**
 * 추상 클래스 설명
 */
public class AbstractClass_01 {

    /**
     * 추상 클래스는 상속과 인터페이스 개념을 모두 사용하기 위한 클래스입니다.
     * 왜 상속과 인터페이스의 모든 개념을 사용하느냐, 이에 대해 설명 드리겠습니다.
     *
     * 상속과 같은 경우엔 부모 클래스에서 내용을 정의하고 자식 클래스에서 그것을 받아서
     * 좀 더 구체화하거나 기능들을 추가하여 사용합니다.
     * 즉, 같은 로직들이 여러 개의 클래스에 존재한다면, 하나의 부모 클래스에
     * 해당 로직을 분리해 내어 부모 클래스를 만들고,
     * 부모 클래스를 상속 받은 자식 클래스들은 공통된 로직을 사용할 수 있게 됩니다.
     * 인터페이스의 경우에는 메소드 안에 구체화된 로직을 가지고 있지 않습니다.
     * 대신 메소드명을 가지고 있음으로써 인터페이스를 구현하는 각각의 클래스들은
     * 공통된 기능 목록들을 가지게 되는 것입니다.
     *
     * 추상 클래스는 이것들의 장점을 복합적으로 사용할 수 있습니다.
     * 공통된 기능 목록을 가지지만 다른 로직을 가진, 또는 똑같은 로직을 가진 추상 클래스를
     * 가질 수 있습니다.
     *
     * 처음, 중간, 또는 마지막에 추가될 로직이 존재하면, 해당 로직을 집어 넣습니다.
     * 추상 메소드에서 기본적으로 제공된 기능을 넣음으로써 이것이 가능합니다.
     * 추상 메소드는 인터페이스의 역할을 제공해 줄 수 있지만,
     * 그것보다 확장된 기능을 제공해 줄 수도 있습니다.
     * 이것이 추상 클래스의 가장 큰 특징입니다.
     *
     * 즉 추상 클래스는 큰 틀에서 기능 목록을 제공해 주거나,
     * 같은 메소드인데 공통된 기능을 제공해 주곤 합니다.
     * 아니면 공통된 기능을 제거하고 아예 새로운 기능을 재정의할 수도 있습니다.
     * 이것이 추상 클래스의 기능이죠.
     *
     * 추상 클래스를 잘 사용하면 훌륭한 객체지향 프로그래밍을 할 수 있습니다.
     * 인터페이스를 잘 사용해도 훌륭한 객체지향 프로그래밍을 할 수 있지요.
     *
     * 스프링 프레임워크 기반의 자바 웹 프로그래밍을 하시면 인터페이스를
     * 자주 사용하시게 될 겁니다.
     * 인터페이스를 이용하여 공통된 기능 목록을 제공하고,
     * 구것을 구현한 클래스에서는 공통된 기능과 그것 이상의 기능들을
     * 구현함으로써 좋은 웹 프로그램을 제작해 낼 수 있습니다.
     *
     * 나중에 Servlet/JSP도 기초적으로 배우고,
     * 스프링 프레임워크까지 익히시게 되면 아시게 될 겁니다.
     *
     * 저는 일단 자바 5부작을 생각하고 있습니다.
     *
     * 이 5부작을 만드는데도 오랜 시간이 걸릴 것 같습니다.
     *
     * 향후 5부작을 넘어서 HTML, CSS 등의 모든 강의 단계를 거치고 나면
     * 스프링 프레임워크까지 진입하게 될 것 같습니다.
     *
     * 그때가 언젠가는 오지 않을까, 싶습니다.
     *
     * 그러면 추상 클래스에 대한 설명은 이 정도로 하고 실습에 들어가겠습니다.
     */

}
