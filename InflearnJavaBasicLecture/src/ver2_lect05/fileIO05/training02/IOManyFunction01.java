package ver2_lect05.fileIO05.training02;

public class IOManyFunction01 {

    public static void main(String[] args) {

        /**
         * 파일의 컨트롤에 있어서 Input과 output 개념이 있습니다.
         * 흔히들 InputStream, OutputStream이라는 개념이 존재하지요.
         *
         * in과 out이 되는 시점의 구분점은 메모리입니다.
         * 프로그램 메모리에 파일 등의 물리적인 자료가 쓰여지는 것을 in,
         * 메모리의 자료가 파일로 나가거나 모니터에 표시되거나 하는 작업을 out이라고 합니다.
         *
         * in과 out의 기본적인 개념은 이와 같은 것을 알아두면 좋습니다.
         *
         * 윈도우에서 텍스트 파일을 더블 클릭하여
         * 모니터에 텍스트 파일을 보여주는 작업을 설명하면,
         * 텍스트 파일을 더블 클릭했을 때 텍스트 파일의 데이터는
         * 메모리로 전달됩니다. 이것이 in입니다.
         * 그리고 메모리에서 모니터 화면으로 텍스트 파일을 출력하여
         * 사용자에게 보여줍니다.
         * 이것이 out입니다.
         *
         * IO라 부르는 작업, 즉 Input과 Output이 이것입니다.
         *
         * in과 out 작업을 처리할 때 메모리로 왔다갔다 할 때에
         * 중간에 연결 통로를 해줘야 하는 것이 있습니다.
         * 그것을 Stream이라고 부릅니다.
         * Stream으로 연결되어 input과 output 작업을 수행하는 것입니다.
         *
         * InputStream과 OutputStream은 byte 단위로 입출력을 수행합니다.
         * Reader와 Writer는 char 단위로 입출력을 수행합니다.
         * 대부분의 데이터는 1byte로 단위로 표현이 됩니다.
         * char가 필요한 경우가 있습니다.
         *
         * 문자를 표현해야 할 때, 1byte만으로 불가할 경우가 있습니다.
         * 대표적으로 한글은 하나가 2byte입니다.
         * 이럴 때 char를 쓰게 됩니다.
         *
         * 그리고 Stream은 단방향입니다.
         * in이 되거나, out이 되거나.
         * 그래서 오로지 읽기만 되거나 쓰기만 가능합니다.
         *
         * 데이터는 0과 1로 표현이 됩니다.
         * 0과 1이 섞여서 하나의 문자가 되곤 합니다.
         * 0과 1이 섞여서 문자가 되는 과정을 디코딩이라 합니다.
         * 그리고 문자를 0과 1로 다시 바꾸는 것을 인코딩이라 합니다.
         * 컴퓨터를 기준으로 생각하면 됩니다.
         * 컴퓨터는 0과 1로 된 데이터를 이해할 수 있습니다.
         * 그렇기 때문에 컴퓨터 기준으로는 문자를 0과 1로 바꾸는 것은 자신이 알아볼 수 있는
         * 인코딩 작업을 하는 것입니다.
         * 그리고 다시 문자로 바꾸는 것은 자신은 알아볼 수 없지만
         * 유저는 알아볼 수 있는 것으로 바꾸는 것이므로 디코딩이라 합니다.
         *
         * 이제 실습을 한 번 진행해 볼까요?
         */

    }

}
