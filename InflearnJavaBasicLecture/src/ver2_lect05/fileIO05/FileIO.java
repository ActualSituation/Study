package ver2_lect05.fileIO05;

public class FileIO {

    /**
     * 파일 인풋, 아웃풋에 대해 설명 드리겠습니다.
     *
     * 프로그래밍은 과거에 데이터베이스를 쓰기 전에는 파일로 데이터들을 관리하던 시기가 있었다고 합니다.
     * 이 강의를 만드는 저자도 그런 시절을 겪어보진 못했습니다.
     * 파일로 데이터를 관리한다니, 저 역시 상상이 안 가는 시절입니다.
     * 하지만 과거에는 그러했다고 합니다.
     * 그때 파일 인풋, 아웃풋을 정말 많이 사용했었겠지요.
     *
     * 데이터베이스로 데이터를 관리하는 요즘 시대에는
     * 파일 인풋, 아웃풋은 엑셀 파일 다운로드, 업로드 등에서 많이 쓰입니다.
     * 거의 다 엑셀 파일이지요.
     * 나중에 이 강의를 들으시는 분들이 프로그래머가 안 된다 하시더라도
     * 어느 분야를 가서 일하시는 마이크로소프트의 오피스 프로그램은 매우 친숙해지실 겁니다.
     * 그 중에서도 엑셀은 정말 업무와 뗄래야 뗄 수 없는 프로그램이 되곤 합니다.
     * 그렇기 때문에 저자가 주로 일하는 업무용 소프트웨어 분야에서도
     * 엑셀로 데이터를 다운로드 받고 업로드하는 작업은 중시되곤 합니다.
     *
     * 그 외에도 파일 인풋, 아웃풋은 여러 곳에서 사용됩니다.
     * 그 중 하나는 통상적인 HTTP 통신을 통한 웹 프로그래밍이 아닐 경우에,
     * 데이터의 전송 및 수신에서도 파일 인풋, 아웃풋을 사용하곤 합니다.
     *
     * 이럴 경우에 쓰는 경우가 있기 때문에
     * 파일 인풋, 아웃풋은 알아두면 좋습니다.
     * 나중에 써야할 경우가 생기기 때문입니다.
     *
     * 다른 방향으로도 설명을 드리겠습니다.
     *
     * 윈도우, 리눅스, 유닉스 등의 운영체제가 있습니다.
     * 윈도우는 익숙하시겠지만 리눅스나 유닉스는 익숙하지 않으시겠죠.
     * 리눅스와 유닉스는 서버용으로 많이 쓰이는 운영체제입니다.
     * 그래서 일반인에게는 그렇게 친숙하지 않은 운영체제입니다.
     * File 클래스는 File의 input과 output에서 많이 쓰이는 클래스인데,
     * 이 우 ㄴ영체제의 물리적인 파일 시스템을 관리할 수 있습니다.
     *
     * 크게 폴더와 파일로 구분하여 읽기, 쓰기, 실행에 관한 권한을 가지고 관리하게 됩니다.
     * 물리적으로는 파일과 폴더로 구분이 됩니다.
     * 하지만 클래스명은 File이기 때문에 혼돈하지 않도록 하는 것이 좋습니다.
     *
     * File 클래스는 운영체제의 폴더와 파일에 관한 정보를 조회할 수 있습니다.
     * 파일과 폴더의 읽기, 쓰기, 실행 가능 여부, 숨김 여부와
     * 파일의 존재 여부, 파일 여부, 폴더 여부를 검색 가능합니다.
     * 그 외에도 파일명, 파일 경로, 부모 폴더, 용량 등을 검색할 수 있고
     * 폴더 내에 있는 파일 목록을 조회할 수 있습니다.
     *
     * File 클래스는 폴더, 또는 파일의 권한 설정 및 생성, 삭제를 할 수 있습니다.
     * 읽기, 쓰기, 실행에 관한 권한, 파일 생성, 폴더 생성, 파일 삭제, 폴더 삭제에 대한 기능,
     * 파일명 변경, 폴더명 변경이 가능합니다.
     *
     * 이 파일 클래스와 넓게는 File Input, Output에 대해 실습해 보겠습니다.
     *
     */

}
