package ver2_lect05.exception01;

/**
 * 예외처리
 * 설명
 */
public class ExceptionIs01 {

    /**
     * 안녕하세요, 예외 처리에 대한 강의입니다.
     *
     * 예외 처리에는 두 가지가 있습니다.
     * throws 를 이용한 처리와 try-catch-finally 블록을 이용한 예외처리가 있습니다.
     * 두 가지의 사용 용도는 다릅니다.
     *
     * 예외는 자바의 클래스 중에서
     * Throwable 클래스를 상속한 클래스입니다.
     * 대표적으로 Exception, Error, RuntimeException이 있습니다.
     * Exception은 모든 예외의 종합이라고 생각하시면 됩니다.
     * Error, RuntimeException과 관련된 타입만 제외하고는
     * 모든 예외는 Exception에 관련이 있습니다.
     *
     * Error는 예외 처리가 가능한 항목이기는 하지만,
     * 해당 Error가 발생한 항목은 시스템의 치명적인 에러인 경우가 있습니다.
     * 시스템 동작의 유지가 불가능할 정도의 치명적인 에러가 있는 경우이므로
     * 예외처리를 하더라도 제대로 처리되지 않고 시스템의 동작이 멈출 수 있습니다.
     *
     * 보통 에러와 예외를 많이들 헷갈리시는데,
     * 에러는 시스템의 유지가 불가능할 정도로 치명적인 오류가 발생하는 경우를 말하고,
     * 예외는 오류가 발생하긴 했지만 시스템의 유지가 불가능할 정도로 치명적인 것은
     * 아닌 경우를 말합니다.
     *
     * 좀 더 쉽게 말하자면 컴퓨터 시스템, 달리 말해 네이버나 다음 등의 포털 사이트를 볼 때
     * 갑자기 브라우저가 다운되서 움직이지도 않고 먹통이 되는 것을
     * 치명적인 에러가 발생했다고 할 수 있으며,
     * 뭔가 이상하게 동작하긴 하지만 다른 페이지로 넘어가는 것은 가능하고 클릭이 되며
     * 다른 곳으로 이동하면 정상 동작하는 것을 예외가 발생했다고
     * 하는 것입니다.
     *
     * RuntimeException은 개발자의 실수로 인해 발생하는 오류로
     * 주로 소스 수정을 통해 오류를 개선하기에, 예외 처리를 하지 않습니다.
     *
     * 예외 처리는 두 가지가 있습니다.
     *
     * try-catch-finally와 throws를 이용한 것입니다.
     *
     * try-catch-finally는 블록을 이용해 예외를 직접 처리하는 것입니다.
     * throws는 예외를 위임하는 것이라고 할 수 있습니다.
     *
     * try-catch-finally는 특징이 있습니다.
     * try 블록 내부에는 업무 로직을 위치 시킵니다.
     * catch 블록은 업무 로직 처리하는 중에 발생하는 예외를 처리하는 구간입니다.
     * finally는 try와 catch 블록 이후에 실행되는 구간이며
     * 에러와 관계없이 무조건 실행되는 구간입니다.
     * 이것이 try-catch-finally입니다.
     *
     * 좀 더 단순히 이야기하자면,
     * 원래 코딩하고자 하는 것은 try 구문 안에 코딩을 하고
     * 예외가 발생했을 때의 처리는 catch 구문 안에 하며,
     * finally는 try 구문의 모든 동작이 끝났을 때
     * 무조건 무언가 동작을 해야할 것을 넣어주는 구간입니다.
     *
     * throws는 예외 처리를 위임하는 것입니다.
     *
     * 무슨 뜻이냐 하면 예외 처리를 해당 구간에서 하지 않고
     * 해당 예외 처리를 throws 뒤에 붙은 곳으로 넘겨서
     * 처리하는 방식이란 뜻입니다.
     *
     * try-catch-finally 블록은 예외를 직접 처리하는 방식이었다면,
     * throws는 예외를 다른 곳으로 넘겨서 처리하는 것이란 뜻입니다.
     *
     * 이론에 대한 설명은 이 정도로 해드리면 될 것 같습니다.
     *
     * 이제 실습을 진행해 보겠습니다.
     *
     */

}
