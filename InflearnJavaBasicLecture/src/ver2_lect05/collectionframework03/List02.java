package ver2_lect05.collectionframework03;

public class List02 {

    /**
     * 컬렉션 프레임워크에는 많은 자료 구조가 있습니다.
     * List, Set, Map이 가장 대표적입니다.
     *
     * List에는
     * ArrayList, LinkedList, Vector, Stack이 대표적입니다.
     * 보통 일을 하다 보면 가장 많이 쓰는 것이 ArrayList입니다.
     * LinkedList는 가끔 쓰이고
     * Vector와 Stack은 거의 안 쓰입니다.
     *
     * ArrayList는 순차적으로 데이터 입출력을 할 때 용이합니다.
     * 들어가는 데이터와 나오는 데이터의 순서가 일정하면
     * ArrayList가 가장 좋습니다.
     * 그리고 속도도 빠릅니다.
     *
     * LinkedList는 데이터가 중간중간 바뀌는 경우가 많을 때 좋습니다.
     *
     * 이 개념들은 자료구조의 개념들이므로 어려운 개념이라 할 수 있습니다.
     * ArrayList는 그 이름 그대로 순차적으로 데이터가 들어가는 것입니다.
     * LinkedList는 문자 그대로 서로 연결된 링크들을 통해 구성된 List입니다.
     * List는 목록이죠.
     *
     * 연결된 링크들이 존재하므로 LinkedList는 연결된 링크의 정보만 수정해 주면
     * 중간의 데이터의 입력, 수정, 삭제가 매우 빠르게 이루어 집니다.
     * 하지만 순차적으로 많은 데이터를 넣어줄 때,
     * ArrayList는 순차적으로 순서를 지정해 주면서 넣어주기만 하면 되지만,
     * LinkedList는 연결된 정보들을 설정해 주면서 넣어주는 작업까지 더해지기 때문에
     * 속도가 느려진다는 단점이 있습니다.
     *
     * 하지만 제가 앞서 말씀 드린 것처럼 ArrayList를 주로 쓰는 이유는 있습니다.
     * 바로 컴퓨터의 성능이 대부분 뛰어나기 때문입니다.
     * 과거에는 cpu 성능이 500메가헤르츠만 넘어도 뛰어나다고 생각하던 시절이 있었습니다.
     * 저의 어릴 적 시절이죠.
     * 지금은 cpu 성능은 1기가를 넘어서 듀얼코어, 쿼드코어라 불리며 여러 개의 코어가
     * 붙어서 돌아가는 시대까지 왔습니다.
     * 당연히 웹 시스템을 만드는 서버의 성능도 매우 뛰어나죠.
     * 그렇기 때문에 아주 대용량이 아닌 이상에는 ArrayList를 쓰거나
     * LinkedList를 쓰는 것은 차이가 없습니다.
     *
     * 여기서 아주 대용량이라 함은 몇 기가 수준이 아니라 몇 테라 수준까지 가는
     * 데이터를 의미합니다.
     * 그런 데이터를 처리할 때는, 그리고 중간에 바뀌는 경우가 많을 때는
     * LinkedList를 고려하는 경우가 있을 것입니다.
     * 하지만 대부분의 웹시스템을 짤 때 List에서 처리하는 데이터는
     * 그렇게 많은 경우는 드뭅니다.
     * 메가바이트가 되는 경우도 드물죠.
     * 그렇기 때문에 ArrayList를 주로 사용합니다.
     *
     * 그러면 이제 실습에 들어가겠습니다.
     */

}
