package lec01;

/**
 * 네 번째
 * 기본형
 */
public class PrimitiveType04 {

    public static void main(String[] args) {
        /**
         * 기본형에는 모두 8개의 타입이 있습니다.
         * 크게 논리형, 문자형, 정수형, 실수형 4가지로 구분됩니다.
         */

        boolean isTrue = false;

        /**
         * 이런 형태를 논리형이라고 합니다.
         * 보통 true와 false로 구분됩니다.
         * 이런 형태는 이 값이 맞습니까? 라는 조건문을 통한 뒤
         * 맞는 true이면 그 안의 로직을 수행하고,
         * false이면 그 안의 로직을 수행하지 않고 비껴 흐르는 형태로
         * 짜게 됩니다.
         *
         * 아직 조건문을 배우지 않으셨으니 이해하시기 힘드실 겁니다.
         * 즉, true와 false를 통해 어떤 특정 조건의 문을 수행할지
         * 수행하지 않을지를 구분하는 것입니다.
         */

        /**
         * 문자형이라는 것이 있습니다.
         * char 라는 것이 있지요.
         */

        char oneChar = '가';
        char twoChar = '나';

        /**
         * 이런 형태로 문자를 저장하는 것입니다.
         * 하나의 문자를 저장하는 것이죠.
         * 보통 자주 쓰이진 않습니다.
         * 다만 프로그래밍을 하다 보면 여러가지의 조건 상황 하에서
         * 저런 char 형태가 필요한 경우도 종종 발생하게 됩니다.
         */

        /**
         * 정수형이라는 것이 있습니다.
         * 정수의 값을 저장하는데 사용하는 것입니다.
         * 주로 사용되는 것은 int와 long입니다.
         * byte는 이진데이터를 다루는데 사용되고,
         * short는 C언어와의 호환을 위해 사용된다고 합니다.
         *
         * 웹 프로그래밍을 하시려는 분들의 경우엔 C언어와의 호환을 고려할 일이 거의 없습니다.
         * Java와 Servlet, Spring framework 또는 Spring boot를 통해서 프로그래밍을 하게 되죠.
         * C언어와의 호환을 고려하는 경우는 특수한 경우일 것입니다.
         * 이 강의를 만드는 저자의 경우엔 그런 경우를 아직 경험해 보진 못했습니다.
         */

        byte firstByte = 1;
        short secondShort = 2;
        int thirdInt = 3;
        long forthLong = 4;

        /**
         * 위의 내용으로는 무슨 차이인지 잘 모르실 겁니다.
         * byte, short, int, long의 가장 큰 차이는 자료의 크기입니다.
         * 자료의 최대값이 각각 다릅니다.
         * 가장 자료의 크기가 큰 것은 long입니다.
         * long이 자료의 크기가 가장 크며 가장 높은 수치의 정수값까지 담을 수 있습니다.
         * 보통의 프로그래밍의 경우엔 int를 가장 많이 씁니다.
         * 이유는 int만으로 어지간한 경우의 수를 모두 감당할 수 있기 때문입니다.
         * 그래서 int를 사용한 변수의 선언과 자료의 저장을 처리할 수 있습니다.
         * 예를 들어서 하나 프로그래밍을 해보겠습니다.
         */

        int frontData = 10;
        int backData = 3;
        int multipleData = frontData * backData;
        System.out.println("mutipleData ::: " + multipleData);

        /**
         * 위의 데이터를 보시면 아시겠지면 정수형끼리의 계산이 됩니다.
         * 다만 이런 기본형 타입을 생각하시면 고려하셔야 할 것이 있습니다.
         * 아래에 코딩 예를 들어보죠.
         */

        int intA = 10;
        long longB = 20l;
        //int intAlongB = intA + longB;

        /**
         * 위와 같은 코딩은 에러가 발생합니다.
         * 왜일까요?
         * 이유는 int보다 long의 자료형 크기가 크기 때문입니다.
         * 그리고 그 두 가지 수를 더한 것을 int에 담으려고 하니 에러가 나는 것입니다.
         *
         * 다른 비유를 들겠습니다.
         *
         * int형 타입을 10리터 물통, long형 타입을 20리터 물통이라고 합시다.
         * 두 가지를 더한 것을 10리터 물통에 담으려고 하니 안 된다고 하는 것입니다.
         * 물론 int형 타입의 10리터 물통에 2리터의 물을 담고 long형 타입의 20리터 물통에 1리터 물을 담은 후에
         * int형 타입의 10리터 물통에 두 가지를 섞으면 3리터의 물이 되겠죠.
         * 그럼 10리터의 물통인 int형 타입의 물통에 부어도 문제가 없지 않느냐는 생각을 하실 수 있습니다.
         * 하지만 예전 강의에서 말씀 드린 것처럼 프로그래밍은 우리들의 눈에만 영어 알파벳과 숫자와 특수기호로
         * 구성되어 있을 뿐, 실제로 컴퓨터에서 코딩한 내용을 구동시키려면 컴퓨터가 이해하는 언어로
         * 변화시켜야 하는 것입니다.
         *
         * 이해가 되시나요?
         *
         * 실제로 컴퓨터에서 코딩한 내용을 구동시키기 위해서 컴퓨터가 이해하는 언어로 변화시켜야만 가능하기에,
         * 위에서 10리터의 물통과 20리터의 물통, 그리고 10리터의 물통에 두 개의 물통에 담긴 물을 담을 때
         * 문제가 발생하는 것은 우리들의 눈에는 알파벳과 숫자, 특수기호의 조합으로 이루어져 있기 때문에,
         * 문제가 없을 것이라 생각하지만 받아들이는 컴퓨터의 입장에선 그런 것이 아니기 때문입니다.
         *
         * 프로그래밍, 그리고 코드를 짜는 행위를 말하는 코딩을 할 때는 무조건 일상생활에서의 규칙으로 이해하시면
         * 문제의 원인이 파악되지 않는 경우가 종종 생깁니다.
         * 그렇기 때문에 코딩을 잘하려면, 컴퓨터의 동작 원리에 대한 기본적인 지식도 존재해야 하는 것입니다.
         * 다시 한 번 설명하지만 우리 눈에 보이는 것은 알파벳과 숫자, 특수기호로 구성된 내용이지만,
         * 그것은 컴파일러를 통해 컴파일이라는 과정을 거쳐 컴퓨터가 이해하는 내용으로 바뀌는 작업을 합니다.
         * 그리고 자바, C, 파이썬, 자바스크립트 등의 언어는 컴퓨터가 이해하는 언어로 바로 짜면 사람에게
         * 너무 고된 작업이 되기에, 그것을 사람이 좀 더 쉽게 짜기 위해 매우 잘하는 분들이 만들어낸 언어들인
         * 것입니다.
         * 보통 저수준 언어, 고수준 언어라고 표현하는 내용들이 그런 것이죠.
         * 여기서는 넘어가겠습니다.
         *
         * 실수형에는 float, double이 있습니다.
         * 이 자료형에는 실수형 자료를 담지요.
         * float은 double보다 크기가 작습니다.
         * 그리고 보통 double을 많이 사용합니다.
         * 이유는 float을 쓸 때는 특별한 처리를 한 가지 더 해줘야 합니다.
         * 아래에 코딩을 해보겠습니다.
         */

        float floatA = 10.1f;
        double doubleB = 20.2;

        /**
         * 차이가 보이십니까?
         * long형 자료형을 선언할 때 뒤에 l을 붙이는 것처럼,
         * float형 자료형을 선언할 때는 뒤에 f를 붙여야 합니다.
         * 특이하죠?
         * 이것은 일종의 규칙이며 위에서 설명드린 바와 같이 일상생활에서의 규칙으로 이해하려 하시면 힘듭니다.
         * 그냥 float floatAB = 10.2; 이렇게 하면 되지 않느냐고 할 수도 있지요.
         * 하지만 자바라는 언어는 다릅니다.
         * 그렇기 때문에 이런 규칙을 잘 이해하고 계셔야 합니다.
         *
         * 이런 반론을 하실 수도 있습니다.
         * float floatAB = 10.2f;를 치는 게 귀찮다 하더라도 정확한 값의 범위를 주는 것이 좋지 않나요?
         * 라고 생각할 수도 있습니다.
         * 하지만 코딩을 하시다 보면 아시게 되는 법칙이 있습니다.
         * 소프트웨어개발의 비용 요소들 중에서 아낄 수 있는 가장 좋은 요소 중 하나는 인건비입니다.
         * 즉 개발자의 투입 비용이죠.
         * 개발자의 투입 비용을 줄이는 가장 좋은 방법은 인원수를 줄이고, 시간을 줄이는 것입니다.
         * 그러다 보면 일정이 빡빡해지기 쉽습니다.
         * 이런 것은 경영학적 요소로 보면 옳은 행위입니다.
         * 왜냐면 비용을 최소화하고 수익을 최대화하는 것이 경영이 추구하는 바이기 때문이지요.
         * 그렇기 때문에 빡빡한 일정 내에서 코딩을 하려면 float을 선언하고 f를 붙이고 이런 행위를
         * 줄이는 것 자체가 개발자에게는 작업 부담을 줄이는 요소 중 하나가 됩니다.
         * 그렇기 때문에 double로 실수를 대부분 선언하고 코딩을 하는 것입니다.
         * 제가 설명 드리는 것은 프로그래밍을 배우고, 실제로 나중에 프로그래머로 활동하시다 보면
         * 이해하시게 되는 법칙 중 하나입니다.
         *
         * 아래에 float과 double을 간단하게 실습해 볼까요?
         */

        float floatA1 = 10.1f;
        double doubleB1 = 20.2;
        double dfAB1 = floatA1 + doubleB;

        System.out.println("dfAB1 ::: " + dfAB1);

        /**
         * 제가 두 자료형을 섞어서 더하기 작업을 하였지만,
         * 사실 저런 형태로 코딩하는 것은 별로 없습니다.
         * double 두 개를 선언해서 두 개를 더하는 경우가 많지요.
         * 그냥 예시를 보여드리기 위해서 저렇게 짰습니다.
         *
         * 몇 가지 샘플 예시를 들어볼까요?
         */

        /**
         * 일일 문서 산출량입니다.
         */

        int accountDocumentCount = 10;
        int humanResourceDocumentCount = 20;
        int procureDocumentCount = 5;
        int productionDocumentCount = 15;
        int salesDocumentCount = 25;

        int totalDailyDocumentCount = accountDocumentCount + humanResourceDocumentCount + procureDocumentCount
                + productionDocumentCount + salesDocumentCount;

        System.out.println("일일 총부서 문서 생산량 : " + totalDailyDocumentCount);

        /**
         * 위와 같은 식으로 코딩하게 됩니다.
         * 회계문서생산량, 인사문서생산량, 구매문서생산량, 생산문서생산량, 영업문서생산량을 구한 뒤
         * 해당 문서들의 합을 구하고 그것이 일일문서생산량이 되는 것입니다.
         * 저기서는 int 변수에 값을 바로 할당했지요?
         * 이것은 예를 들기 위해 저렇게 표현한 것입니다.
         * 보통은 화면단에서 넘겨온 데이터를 받아서 변수의 형태로 처리하여 받고 계산을 하지요.
         * 웹 개발자를 지망하시는 분이시라면 프론트엔드, 백엔드라는 표현을 많이 들어보셨지요?
         * 그런 개발자들 중 프론트엔드 분들이 처리해서 ajax나 axios와 같은 기능을 이용해서
         * 백단으로 데이터를 던져주는 것입니다.
         * 그럼 백단에서 위와 같이 처리하여 데이터를 가공하고 database나 file 형태로 데이터를
         * 저장하게 되는 것입니다.
         *
         * 잠시 아래의 예시를 들어보겠습니다.
         */

        int getFromFrontSaleDocumentCount = 10;

        int salesDocumentCountFromFront = getFromFrontSaleDocumentCount;

        /**
         * 간단한 예시입니다.
         * 본래 getFromFrontSaleDocumentCount이라는 변수에 담긴 값조차도 존재하지 않지요.
         * 스프링을 예로 들자면 @RequestBody DocumentVO documentVO 나 여러 형태로
         * 데이터를 받아서 처리하게 되는 거지요.
         * 그것을 위와 같이 getFromFrontSaleDocumentCount의 형태로 임시로 표현한 것입니다.
         * 그리고 아래에 salesDocumentCountFromFront라는 변수에 옆에 해당 값이 담긴
         * 변수를 대입하여 값을 할당해 주는 것입니다.
         *
         * 이런 프로그래밍은 나중에 깊이 있게 아시고 웹까지 넓게 아신다면 자주 하시게 되실 겁니다.
         * 여기서는 예를 잠시 보여드렸을 뿐입니다.
         */

        /**
         * 각 자료형에는 크기가 있습니다.
         * boolean은 1byte,
         * char, short는 2byte,
         * int, float은 4byte,
         * long, double은 8byte의 크기를 가지고 있습니다.
         *
         * 아까 제가 물통의 비유를 들었지요?
         * 그게 무엇인지 이해가 되시나요?
         * 저렇게 자료형의 크기를 가지게 되는 것입니다.
         * 그렇기 때문에 int형 자료형과 long형 자료형을 더한 뒤에는
         * int형 자료형에 담기 힘든 것입니다.
         * 왜냐면 int형 자료형은 4byte이고 long형 자료형은 8byte이기 때문입니다.
         * 바로 코딩을 배우시는 분이라면 byte라는 단위가 생소하실 것입니다.
         * 이것은 컴퓨터공학의 기초를 배우면 알게 되는 자료의 크기 중 하나입니다.
         * bit, byte, 이런 식으로 나가게 되지요.
         * byte는 많이 들어보셨을 것입니다.
         * 하드디스크가 1TB다, SSD가 500GB이다, 할 때 뒤의 B가 byte이지요.
         * 그때 byte가 바로 위의 자료형이 byte입니다.
         * 즉 자료형의 크기인 것이죠.
         * 이것도 나중에 코딩을 하시다 보면 더 수준 높은 코드를 짜고,
         * 아키텍처를 고려하는 개발자가 되려면 아셔야 하는 개념입니다.
         *
         * 제가 딸 때와는 달라졌다고 하지만,
         * 정보처리기사를 공부할 때는 저 개념을 알아야 했었구요.
         * bit, byte 개념은 늘 따라다니는 개념이긴 합니다.
         * 하지만 초급일 때는 잘 몰라도 문제가 없는 개념이기도 합니다.
         * 그러나 누구나 높은 연봉을 받고 싶고 잘하는 개발자가 되고 싶어하죠.
         * 저 역시 그렇습니다.
         * 그렇기 때문에 초급보다 더 높은 개발자가 되려면 저런 개념도 파악하셔야 합니다.
         *
         * 하지만 이번 강의에서는 깊게 다루지 않겠습니다.
         *
         * 저의 강의의 목적은, 저의 강의를 들으시고 자바 프로그래밍을 기본적인 수준을 하면서
         * 자바라는 언어에 친숙해지시길 바라는 마음에 만든 것입니다.
         * 왜냐면 저도 자바라는 언어를 배울 때, 무척 고생을 했습니다.
         * 그때 저에게 도움이 되었던 것은
         * 얇은 자바 입문용 서적이었습니다.
         * 거기서 많은 이해도를 얻게 되었고,
         * 향후에는 두꺼운 자바 서적을 공부하며 깊은 지식까지 파고든 것이기 때문입니다.
         *
         * 저의 강의는 제가 그때 당시 읽었던 얇은 자바 입문용 서적이라고 생각하시면 됩니다.
         *
         * 감사합니다.
         */


    }

}
