package lec01;

import java.util.ArrayList;

/**
 * 다섯번째
 * 배열
 */
public class Array05 {

    public static void main(String[] args) {

        /**
         * 강의의 순서를 잠시 고민했습니다.
         *
         * 조건문과 반복문을 먼저 알려드리고, 배열을 할까?
         * 아니면 배열을 먼저 하고 조건문과 반복문을 할까?
         *
         * 우선 자료형을 설명한 김에 배열까지 설명하는 것이 낫다는 생각이 들었습니다.
         * 배열을 깊게 설명하진 않을 것입니다.
         * 배열은 2차원 배열 등 더 깊게 들어가면 다루기 어려운 자료 형태입니다.
         * 하지만 기본적인 수준만 잘 알고 있으면 매우 좋기도 합니다.
         * 그리고 제가 실무를 하면서 쓴 배열은 대부분 1차원 배열에서 끝났습니다.
         * 그리고 저는 자바 웹 개발자입니다.
         *
         * 만약 복잡한 알고리즘 등을 필요로 할 때는 다차원 배열을 쓰실 경우가 많을 수도 있습니다.
         * 그것 이외에는 다중 list를 구현하여 다차원 배열을 만들 수도 있을 것입니다.
         * 여러 가지 경우의 수를 고려해 볼 수 있을 것입니다.
         * 그리고 하나 더, 1차원 배열을 종종 쓰고 배열을 잘 안 쓰는 이유는 따로 있습니다.
         * 바로 컬렉션 프레임워크라는 것이 있기 때문입니다.
         * 컬렉션 프레임워크는 자바로 자료구조를 쉽게 쓸 수 있도록 쉽게 구현해 놓은 것입니다.
         * 자료구조에는 Map, List, Tree, Graph, Set 등이 있습니다.
         * 이 중에서 Map과 List를 정말 많이 쓰지요.
         * 지금은 컬렉션 프레임워크를 배우기에는 너무 이르다는 판단이 듭니다.
         * 컬렉션 프레임워크는 객체지향의 개념을 가볍게라도 알고 난 다음에 하는 것이 좋습니다.
         *
         * 배열의 사용에 대해 설명하다 보니 너무 멀리까지 내다봤습니다.
         * 배열에 대해 가벼운 이해도를 가져보도록 하겠습니다.
         *
         * 실습용 코드는 조건문과 반복문을 배우고 난 다음에 몇 가지를 짜보도록 하겠습니다.
         * 이유는 조건문과 반복문까지 배우고 나면 여러 가지 예를 들며 실습용 코드를
         * 짜볼 수가 있기 때문입니다.
         *
         * 그리고 클래스와 객체를 배우고 난 뒤에도 여러 가지의 실습용 코드를 짜볼 수 있습니다.
         *
         * 배열에 대해 설명하겠습니다.
         *
         * 아래의 코드를 봐주세요.
         */

        int[] arrA = new int[]{1, 2, 3, 4, 5};
        int[] arrB = new int[5];
        arrB[0] = 1;
        arrB[1] = 2;
        arrB[2] = 3;
        arrB[3] = 4;
        arrB[4] = 5;

        /**
         * 크게 위와 같은 두 가지 형태의 배열을 선언하여 사용할 수 있습니다.
         * 배열을 선언하는 방식은 구글에서 참고하여 사용하시길 추천합니다.
         * 사실 배열을 잘 안 쓰는 이유는 따로 있습니다.
         * 위의 배열에서 arrB[0], arrB[1] 이런 형태를 보셨지요?
         * 다른 예를 들어 보이겠습니다.
         */

        ArrayList<Integer> sampleIntList = new ArrayList<>();
        sampleIntList.add(1);
        sampleIntList.add(2);

        /**
         * 위의 내용은 컬렉션 프레임워크의 arraylist입니다.
         * 간단하죠?
         * 뭐가 간단한가요? 라고 생각하실 수도 있습니다.
         * 배열을 더할 때는 arrB[1] = 0;
         * 이런 형태로 복잡하게 만들어야 합니다.
         * 하지만 list는 add 메서드를 사용하여 값을 더할 수 있습니다.
         * 이건 지금처럼 간단한 샘플을 짤 때, 그리고 복잡하지 않은 데이터를 다룰 때는
         * 큰 차이를 못 느낄 수도 있습니다.
         * 하지만 복잡한 데이터를 짤 때,
         * 그리고 실무용 업무 로직, 즉 기능의 구현 방식을 짤 때는 이야기가 달라집니다.
         * .add 등의 메서드를 사용하여 값을 넣어주는 것이 훨씬 편리합니다.
         * 거기다가 배열은 크기가 고정되어 있습니다.
         * 선언할 때 8이란 크기를 넣어서 선언하면 크기가 8로 고정됩니다.
         * list를 사용하면 크기가 고정되지 않습니다.
         * 물론 list에도 담을 수 있는 자료의 크기의 한계는 있습니다.
         * 컴퓨터를 하고, 코딩을 하다 보면 무한하다는 개념은 거의 없습니다.
         * 특히나 무한루프는 어디서든 문제가 발생하게 되는 개념입니다.
         * 그렇기 때문에 무한하다는 생각을 하시고 코딩을 하시면 위험합니다.
         * 위와 같이 배열과 리스트의 차이를 보여 드렸습니다.
         * 왜 배열을 잘 안 쓰는지 약간은 이해가 되셨기를 바랍니다.
         *
         * 배열은 이정도로만 설명하겠습니다.
         *
         * 배열을 다루실 때는 구글에서 검색하여 사용하시길 바랍니다.
         * 참고로 다시 말씀드리자면, 배열은 잘 안 씁니다.
         * list를 많이 씁니다.
         * 그리고 list는 컬렉션 프레임워크에 존재합니다.
         * 컬렉션 프레임워크는 클래스와 객체 개념을 배운 뒤에 배울 수 있는 개념입니다.
         * 컬렉션 프레임워크에는 Map, Set, List 등의 것이 있습니다.
         *
         * 이 정도로 설명하겠습니다.
         *
         * 감사합니다.
         */

    }

}
