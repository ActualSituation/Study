package ver2_lec02;

/**
 * 인터페이스
 */
public class Interface_01 {

    /**
     * - 인터페이스는 기능을 정의하며 이를 사용하기 위해서는
     *   인터페이스를 구현한 클래스를 정의하여 사용해야 합니다.
     * - 인터페이스는 'implements'를 이용하여 구현할 수 있습니다.
     * - 인터페이스는 추상 메소드를 정의할 수 있으며 반드시 구현 클래스에서 재정의해야 합니다.
     *
     * 인터페이스의 개념 및 효과
     * - 인터페이스란 개념적인 의미로 사용자와 사용자가 추구하고자 하는 일을 처리하기 위한
     *   중간 매개체입니다.
     * - 표준화된 관리 타입을 위해 인터페이스가 사용됩니다.
     * - 기능 목록을 줄 테니 재정의(Override)하여 사용하라는 의미도 가집니다.
     *
     * - 인터페이스는 'implements' 키워드와 콤마(,)를 이용하여 다중 구현이 가능합니다.
     *   여러 개의 인터페이스를 클래스에서 직접 구현이 가능합니다.
     *   다중 구현의 경우, 함수가 같을 경우에는 사용이 불가합니다.
     *
     * - 인터페이스를 구현한 클래스에서는 인터페이스에 정의된 추상 메소드를 모두 구현해야 합니다.
     * - 인터페이스를 구현한 클래스를 상속받은 경우 모든 기능을 그대로 사용할 수 있으며,
     *   필요한 기능을 재정의하여 사용할 수 있습니다.
     *
     * - 인터페이스란 개념적인 의미로 사용자와 사용자가 추구하고자 하는 일을 처리하기 위한
     *   중간 매개체입니다.
     *   예 ) 업무 화면이 있습니다. 아니면 포털 화면이 있다고 하겠습니다.
     *   화면에는 버튼이나 게시글이 있습니다.
     *   버튼을 클릭하면 글을 쓰거나 메일, 쪽지를 보냅니다.
     *   게시글을 클릭하면 안의 글을 읽을 수 있습니다.
     *
     *   메일, 쪽지, 게시글에 구현되어 있는 로직을 이해할 필요가 없습니다.
     *   어떤 로직이 구현되어 있는지 모릅니다.
     *   개발자는 안에 로직을 구현해 놓습니다.
     *   이때 버튼과 게시글이 보이는 화면이 인터페이스입니다.
     *   즉, 사용자와 프로그래머인 개발자 사이의 중간 매개체인 것입니다.
     *   사용자는 화면을 통해 프로그래머가 개발해 놓은 프로그램을 사용할 수 있는 것이고,
     *   프로그래머는 화면을 통해 사용자가 어떤 동작을 할 수 있도록 매개체를 제공하는 것입니다.
     *
     * - 스마트폰도 인터페이스라고 생각하면 됩니다.
     *   스마트폰의 화면의 앱을 보면서 사용자는 그 안에 어떤 기능이 어떻게 프로그램적으로
     *   구현되어 있는지 알 필요는 없습니다.
     *   그냥 기능을 쓰기만 하면 됩니다.
     *   프로그래머, 개발자는 화면을 통해 사용자가 사용할 수 있는 기능을 제공하여 줍니다.
     *
     * - 표준화를 인터페이스를 통해 구현할 수 있습니다.
     *   인터페이스가 정의한 기능 목록은, 개발자에게 해당 기능을 사용하라고 일종의 강제하는
     *   역할을 수행합니다.
     *   인터페이스를 구현한 클래스는 인터페이스에 정의된 기능을 모두 구현해야만 합니다.
     *   그래야 에러가 발생하지 않습니다.
     *   그렇기 때문에 자동으로 인터페이스를 구현한 클래스에 기능을 모두 사용하라고 강제할 수 있으며
     *   인터페이스를 통해 클래스의 표준화, 넓게 보면 코드의 표준화를 이룰 수 있습니다.
     *
     *   표준화는 넓게 보면 기능 목록을 제공하고, 인터페이스를 구현한 클래스에서는
     *   제공된 기능 목록을 활용하여 해당 목록의 세부 내용을 채우는 역할을 수행합니다.
     *   인터페이스를 구현한 클래스는 인터페이스가 제공하는 모든 기능 목록을 구현해야 합니다.
     *   그렇기 때문에 인터페이스는 클래스에 기능 목록을 제공하는 역할도 수행합니다.
     *
     * - 인터페이스를 사용하면 장점이 있습니다.
     *   기능 목록을 명확히 제공해 줄 수 있습니다.
     *   인터페이스에 정의된 기능 목록을 수정하면 이를 구현한 모든 클래스에서도 수정되어야 합니다.
     *   과일 인터페이스를 구현한 사과, 포도, 수박 클래스 객체는 모두 과일 인터페이스의 타입이 될 수 있습니다.
     *   향후 함수 등의 파라미터의 타입을 과일 인터페이스로 하면 사과, 포도, 수박 클래스의 객체를
     *   모두 사용할 수 있습니다.
     *   이 개념은 객체지향에서 다형성과도 연결이 됩니다.
     *   다형성은 어려운 개념이므로, 향후 이론 강의 제작에서 자세히 다룰 예정입니다.
     *   현재는 그럴 수 있다, 라고만 이해하고 넘어갑니다.
     *
     *   인터페이스에 대해 실습을 해보도록 하겠습니다.
     */

}
